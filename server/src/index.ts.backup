import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import { createServer } from 'http';
import { WebSocketServer } from 'ws';
import dotenv from 'dotenv';
import { initializeDatabase } from './database/init';
import authRoutes from './routes/auth';
import productRoutes from './routes/products';
import cartRoutes from './routes/cart';
import orderRoutes from './routes/orders';
import adminRoutes from './routes/admin';
import paymentRoutes from './routes/payments';
import stripePaymentRoutes from './routes/stripePayments';
import chatRoutes from './routes/chat';
import ratingRoutes from './routes/ratings';
import { authenticateToken } from './middleware/auth';
import { WebSocketManager } from './services/websocket';

// Load environment variables
dotenv.config();
console.log('🔧 Environment loaded:');
console.log('  - NODE_ENV:', process.env.NODE_ENV);
console.log('  - JWT_SECRET:', process.env.JWT_SECRET ? '***SET***' : 'NOT SET');
console.log('  - PORT:', process.env.PORT);
console.log('  - CORS_ORIGIN:', process.env.CORS_ORIGIN);

const app = express();
const server = createServer(app);
const port = process.env.PORT || 3001;

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.'
});

// Middleware
app.use(helmet());
app.use(cors({
  origin: process.env.CORS_ORIGIN || ['http://localhost:5173', 'http://localhost:5174'],
  credentials: true
}));
app.use(limiter);
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Initialize WebSocket
const wss = new WebSocketServer({ server });
const wsManager = new WebSocketManager(wss);

// Health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    port: port
  });
});

// Root route
app.get('/', (req, res) => {
  res.json({ 
    message: 'XX-Commerce API is running! 🚀',
    status: 'OK',
    timestamp: new Date().toISOString(),
    endpoints: {
      health: '/health',
      api: '/api',
      products: '/api/products',
      auth: '/api/auth'
    }
  });
});

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/products', productRoutes);
app.use('/api/cart', authenticateToken, cartRoutes);
app.use('/api/orders', authenticateToken, orderRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/payments', paymentRoutes);
app.use('/api/stripe', stripePaymentRoutes);
app.use('/api/chat', chatRoutes);
app.use('/api/ratings', ratingRoutes);

// Error handling middleware
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error(err.stack);
  res.status(500).json({ 
    error: 'Something went wrong!',
    message: process.env.NODE_ENV === 'development' ? err.message : 'Internal server error'
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

// Initialize database and start server
  async function startServer() {
    try {
      await initializeDatabase();
      console.log('✅ Database initialized successfully');
    
    server.listen(port, "0.0.0.0", () => {
      console.log(`🚀 Server running on port ${port}`);
      console.log(`📱 Frontend: ${process.env.CORS_ORIGIN || 'http://localhost:5173'}`);
      console.log(`🔌 WebSocket: ws://0.0.0.0:${port}`);
    });
  } catch (error) {
    console.error('❌ Failed to start server:', error);
    process.exit(1);
  }
}

startServer();

export { wsManager }; 