import { create } from "zustand"
import { CartItem, CartResponse, ApiResponse } from "../types"
import { api } from "../lib/api"

interface CartState {
  items: CartItem[]
  total: number
  isLoading: boolean
  error: string | null
}

interface CartActions {
  loadCart: () => Promise<void>
  addToCart: (productId: number, quantity: number) => Promise<void>
  updateQuantity: (productId: number, quantity: number) => Promise<void>
  removeFromCart: (productId: number) => Promise<void>
  clearCart: () => Promise<void>
  clearError: () => void
}

type CartStore = CartState & CartActions

export const useCartStore = create<CartStore>((set, get) => ({
  items: [],
  total: 0,
  isLoading: false,
  error: null,

  loadCart: async () => {
    set({ isLoading: true, error: null })
    try {
      const response = await api.get<ApiResponse<CartResponse>>("/cart")
      const { items, total } = response.data.data || { items: [], total: 0 }
      
      set({ items, total, isLoading: false })
    } catch (error: any) {
      set({ 
        error: error.response?.data?.error || "Failed to load cart", 
        isLoading: false 
      })
    }
  },

  addToCart: async (productId: number, quantity: number) => {
    set({ isLoading: true, error: null })
    try {
      await api.post("/cart", { product_id: productId, quantity })
      await get().loadCart()
    } catch (error: any) {
      set({ 
        error: error.response?.data?.error || "Failed to add to cart", 
        isLoading: false 
      })
      throw error
    }
  },

  updateQuantity: async (productId: number, quantity: number) => {
    set({ isLoading: true, error: null })
    try {
      await api.put(`/cart/${productId}`, { quantity })
      await get().loadCart()
    } catch (error: any) {
      set({ 
        error: error.response?.data?.error || "Failed to update cart", 
        isLoading: false 
      })
      throw error
    }
  },

  removeFromCart: async (productId: number) => {
    set({ isLoading: true, error: null })
    try {
      await api.delete(`/cart/${productId}`)
      await get().loadCart()
    } catch (error: any) {
      set({ 
        error: error.response?.data?.error || "Failed to remove from cart", 
        isLoading: false 
      })
      throw error
    }
  },

  clearCart: async () => {
    set({ isLoading: true, error: null })
    try {
      await api.delete("/cart")
      set({ items: [], total: 0, isLoading: false })
    } catch (error: any) {
      set({ 
        error: error.response?.data?.error || "Failed to clear cart", 
        isLoading: false 
      })
      throw error
    }
  },

  clearError: () => {
    set({ error: null })
  }
}))
